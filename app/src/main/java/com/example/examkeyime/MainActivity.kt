package com.example.examkeyime

import android.app.Activity
import android.content.Intent
import android.graphics.Color
import android.graphics.Typeface
import android.graphics.drawable.GradientDrawable
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.view.Gravity
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.activity.result.contract.ActivityResultContracts
import com.example.examkeyime.algorithm.MatchingAlgorithm
import com.example.examkeyime.data.QuestionRepository
import com.example.examkeyime.util.FileManager
import com.example.examkeyime.util.MarkdownParser
import com.google.gson.Gson
import kotlinx.coroutines.*

class MainActivity : AppCompatActivity() {

    private val mainScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private lateinit var fileManager: FileManager
    private lateinit var markdownParser: MarkdownParser
    private lateinit var matchingAlgorithm: MatchingAlgorithm
    
    // ÂØºËà™Áõ∏ÂÖ≥
    private lateinit var bottomNavigation: LinearLayout
    private lateinit var contentContainer: FrameLayout
    private var currentTab = 0
    
    // È°µÈù¢ÂÜÖÂÆπ
    private lateinit var homePageContent: LinearLayout
    private lateinit var uploadPageContent: LinearLayout
    private lateinit var algorithmPageContent: LinearLayout
    
    private val filePickerLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->
        uri?.let { handleFileUpload(it) }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // ÂàùÂßãÂåñÂ∑•ÂÖ∑Á±ª
        fileManager = FileManager(this)
        markdownParser = MarkdownParser()
        matchingAlgorithm = MatchingAlgorithm(this)
        
        // ÂàõÂª∫Áé∞‰ª£Âåñ‰∏ªÂ∏ÉÂ±Ä
        createModernMainLayout()
        
        // Âä†ËΩΩÊï∞ÊçÆ
        loadStats()
    }
    
    private fun createModernMainLayout() {
        // ‰∏ªÂÆπÂô®
        val mainLayout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setBackgroundColor(Color.parseColor("#F8F9FA"))
        }
        
        // È°∂ÈÉ®Ê†áÈ¢òÊ†è
        createTopBar(mainLayout)
        
        // ÂÜÖÂÆπÂÆπÂô®
        contentContainer = FrameLayout(this).apply {
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                0,
                1f
            )
        }
        mainLayout.addView(contentContainer)
        
        // Â∫ïÈÉ®ÂØºËà™Ê†è
        createBottomNavigation(mainLayout)
        
        // ÂàõÂª∫ÂêÑ‰∏™È°µÈù¢ÂÜÖÂÆπ
        createHomePageContent()
        createUploadPageContent()
        createAlgorithmPageContent()
        
        // ÊòæÁ§∫ÈªòËÆ§È°µÈù¢
        showTab(0)
        
        setContentView(mainLayout)
    }
    
    // ÂàõÂª∫Áé∞‰ª£ÂåñÈ°∂ÈÉ®Ê†áÈ¢òÊ†è
    private fun createTopBar(parent: LinearLayout) {
        val topBar = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
            background = createGradientDrawable("#2196F3", 24f)
            setPadding(24, 48, 24, 32)
            elevation = 8f
        }
        
        val titleText = TextView(this).apply {
            text = "ExamKeyËæìÂÖ•Ê≥ï"
            textSize = 26f
            typeface = Typeface.DEFAULT_BOLD
            setTextColor(Color.WHITE)
            layoutParams = LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1f
            )
        }
        
        topBar.addView(titleText)
        parent.addView(topBar)
    }
    
    // ÂàõÂª∫Â∫ïÈÉ®ÂØºËà™Ê†è
    private fun createBottomNavigation(parent: LinearLayout) {
        bottomNavigation = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                140
            )
            setBackgroundColor(Color.WHITE)
            elevation = 16f
        }
        
        // È¶ñÈ°µÊ†áÁ≠æ
        val homeTab = createNavTab("üè†", "È¶ñÈ°µ", 0)
        bottomNavigation.addView(homeTab)
        
        // ‰∏ä‰º†È°µÊ†áÁ≠æ
        val uploadTab = createNavTab("üì§", "‰∏ä‰º†", 1)
        bottomNavigation.addView(uploadTab)
        
        // ÁÆóÊ≥ïÈ°µÊ†áÁ≠æ
        val algorithmTab = createNavTab("‚öôÔ∏è", "ÁÆóÊ≥ï", 2)
        bottomNavigation.addView(algorithmTab)
        
        parent.addView(bottomNavigation)
    }
    
    // ÂàõÂª∫ÂØºËà™Ê†áÁ≠æ
    private fun createNavTab(icon: String, text: String, tabIndex: Int): LinearLayout {
        return LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            gravity = Gravity.CENTER
            layoutParams = LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.MATCH_PARENT,
                1f
            )
            setPadding(8, 12, 8, 12)
            
            // ÈÄâ‰∏≠Áä∂ÊÄÅÁöÑËÉåÊôØ
            if (tabIndex == currentTab) {
                background = createGradientDrawable("#E3F2FD", 16f)
            }
            
            setOnClickListener { showTab(tabIndex) }
            
            val iconView = TextView(this@MainActivity).apply {
                this.text = icon
                textSize = 24f
                gravity = Gravity.CENTER
                setTextColor(if (tabIndex == currentTab) Color.parseColor("#2196F3") else Color.parseColor("#757575"))
            }
            addView(iconView)
            
            val textView = TextView(this@MainActivity).apply {
                this.text = text
                textSize = 12f
                gravity = Gravity.CENTER
                setTextColor(if (tabIndex == currentTab) Color.parseColor("#2196F3") else Color.parseColor("#757575"))
                setPadding(0, 4, 0, 0)
            }
            addView(textView)
        }
    }
    
    // ÊòæÁ§∫ÊåáÂÆöÈ°µÈù¢
    private fun showTab(tabIndex: Int) {
        currentTab = tabIndex
        contentContainer.removeAllViews()
        
        when (tabIndex) {
            0 -> {
                contentContainer.addView(homePageContent)
                loadStats()
            }
            1 -> contentContainer.addView(uploadPageContent)
            2 -> contentContainer.addView(algorithmPageContent)
        }
        
        // Êõ¥Êñ∞ÂØºËà™Ê†èÊ†∑Âºè
        updateNavStyles()
    }
    
    // Êõ¥Êñ∞ÂØºËà™Ê†èÊ†∑Âºè
    private fun updateNavStyles() {
        for (i in 0 until bottomNavigation.childCount) {
            val tab = bottomNavigation.getChildAt(i) as LinearLayout
            if (i == currentTab) {
                tab.background = createGradientDrawable("#E3F2FD", 16f)
            } else {
                tab.background = null
            }
            
            val iconView = tab.getChildAt(0) as TextView
            val textView = tab.getChildAt(1) as TextView
            
            val color = if (i == currentTab) Color.parseColor("#2196F3") else Color.parseColor("#757575")
            iconView.setTextColor(color)
            textView.setTextColor(color)
        }
    }

    // ÂàõÂª∫È¶ñÈ°µÂÜÖÂÆπ
    private fun createHomePageContent() {
        homePageContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(24, 24, 24, 24)
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.MATCH_PARENT,
                FrameLayout.LayoutParams.MATCH_PARENT
            )
        }
        
        val scrollView = ScrollView(this)
        val scrollContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
        }
        
        // Ê¨¢ËøéÂç°Áâá
        val welcomeCard = createModernCard()
        val welcomeContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(24, 24, 24, 24)
        }
        
        val welcomeTitle = TextView(this).apply {
            text = "üìä È¢òÂ∫ìÁªüËÆ°"
            textSize = 24f
            typeface = Typeface.DEFAULT_BOLD
            setTextColor(Color.parseColor("#1A1A1A"))
            setPadding(0, 0, 0, 16)
        }
        welcomeContent.addView(welcomeTitle)
        
        val loadingText = TextView(this).apply {
            text = "Ê≠£Âú®Âä†ËΩΩÈ¢òÂ∫ìÁªüËÆ°..."
            textSize = 16f
            setTextColor(Color.parseColor("#666666"))
        }
        welcomeContent.addView(loadingText)
        
        welcomeCard.addView(welcomeContent)
        scrollContent.addView(welcomeCard)
        
        scrollView.addView(scrollContent)
        homePageContent.addView(scrollView)
    }

    // ÂàõÂª∫‰∏ä‰º†È°µÈù¢ÂÜÖÂÆπ
    private fun createUploadPageContent() {
        uploadPageContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(24, 24, 24, 24)
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.MATCH_PARENT,
                FrameLayout.LayoutParams.MATCH_PARENT
            )
        }
        
        val scrollView = ScrollView(this)
        val scrollContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
        }
        
        // ‰∏ä‰º†Âç°Áâá
        val uploadCard = createModernCard()
        val uploadContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(24, 24, 24, 24)
        }
        
        val uploadTitle = TextView(this).apply {
            text = "üì§ ÊñáÊ°£‰∏ä‰º†"
            textSize = 24f
            typeface = Typeface.DEFAULT_BOLD
            setTextColor(Color.parseColor("#1A1A1A"))
            setPadding(0, 0, 0, 16)
        }
        uploadContent.addView(uploadTitle)
        
        val uploadDesc = TextView(this).apply {
            text = "ÊîØÊåÅMDÊ†ºÂºèÊñá‰ª∂ÔºåËá™Âä®Ëß£ÊûêÈ¢òÂ∫ìÂÜÖÂÆπ"
            textSize = 16f
            setTextColor(Color.parseColor("#666666"))
            setPadding(0, 0, 0, 24)
        }
        uploadContent.addView(uploadDesc)
        
        // ÊåâÈíÆÂå∫Âüü
        val buttonContainer = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            setPadding(0, 0, 0, 24)
        }
        
        val uploadButton = createActionButton("ÈÄâÊã©Êñá‰ª∂", "#4CAF50") {
            filePickerLauncher.launch("*/*")
        }
        buttonContainer.addView(uploadButton)
        
        val formatButton = createActionButton("Ê†ºÂºèËØ¥Êòé", "#FF9800") {
            showFormatReference()
        }
        buttonContainer.addView(formatButton)
        
        uploadContent.addView(buttonContainer)
        
        // Êñá‰ª∂ÂàóË°®
        val fileListTitle = TextView(this).apply {
            text = "Â∑≤‰∏ä‰º†Êñá‰ª∂"
            textSize = 18f
            typeface = Typeface.DEFAULT_BOLD
            setTextColor(Color.parseColor("#1A1A1A"))
            setPadding(0, 0, 0, 16)
        }
        uploadContent.addView(fileListTitle)
        
        val fileListContainer = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
        }
        updateFileList(fileListContainer)
        uploadContent.addView(fileListContainer)
        
        uploadCard.addView(uploadContent)
        scrollContent.addView(uploadCard)
        
        scrollView.addView(scrollContent)
        uploadPageContent.addView(scrollView)
    }

    // ÂàõÂª∫ÁÆóÊ≥ïÈ°µÈù¢ÂÜÖÂÆπ
    private fun createAlgorithmPageContent() {
        algorithmPageContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(24, 24, 24, 24)
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.MATCH_PARENT,
                FrameLayout.LayoutParams.MATCH_PARENT
            )
        }
        
        val scrollView = ScrollView(this)
        val scrollContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
        }
        
        // ÁÆóÊ≥ïËÆæÁΩÆÂç°Áâá
        val algorithmCard = createModernCard()
        val algorithmContent = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(24, 24, 24, 24)
        }
        
        val algorithmTitle = TextView(this).apply {
            text = "‚öôÔ∏è ÂåπÈÖçÁÆóÊ≥ïËÆæÁΩÆ"
            textSize = 24f
            typeface = Typeface.DEFAULT_BOLD
            setTextColor(Color.parseColor("#1A1A1A"))
            setPadding(0, 0, 0, 16)
        }
        algorithmContent.addView(algorithmTitle)
        
        // ÂΩìÂâçÁ∫ßÂà´ÊòæÁ§∫
        val currentLevelText = TextView(this).apply {
            text = "ÂΩìÂâçÁ∫ßÂà´Ôºö${getLevelDisplayName(matchingAlgorithm.getCurrentLevel())}"
            textSize = 18f
            typeface = Typeface.DEFAULT_BOLD
            setTextColor(Color.parseColor("#2196F3"))
            setPadding(0, 0, 0, 24)
        }
        algorithmContent.addView(currentLevelText)
        
        // Á∫ßÂà´ÈÄâÊã©
        MatchingAlgorithm.MatchingLevel.values().forEach { level ->
            val levelButton = createLevelSelectionCard(level, currentLevelText)
            algorithmContent.addView(levelButton)
        }
        
        // ËØ¥ÊòéÊñáÊú¨
        val explanationText = TextView(this).apply {
            text = getAlgorithmExplanation()
            textSize = 14f
            setTextColor(Color.parseColor("#666666"))
            setPadding(16, 24, 16, 0)
            background = createGradientDrawable("#F5F5F5", 12f)
        }
        algorithmContent.addView(explanationText)
        
        algorithmCard.addView(algorithmContent)
        scrollContent.addView(algorithmCard)
        
        scrollView.addView(scrollContent)
        algorithmPageContent.addView(scrollView)
    }
    
    // ÂàõÂª∫Áé∞‰ª£ÂåñÂç°Áâá
    private fun createModernCard(): LinearLayout {
        return LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                bottomMargin = 24
            }
            background = createGradientDrawable("#FFFFFF", 20f)
            elevation = 6f
        }
    }
    
    // ÂàõÂª∫ÂúÜËßíËÉåÊôØ
    private fun createGradientDrawable(color: String, radius: Float): GradientDrawable {
        return GradientDrawable().apply {
            setColor(Color.parseColor(color))
            cornerRadius = radius
        }
    }
    
    // ÂàõÂª∫ÂõæÊ†áÊåâÈíÆ
    private fun createIconButton(icon: String, onClick: () -> Unit): Button {
        return Button(this).apply {
            text = icon
            textSize = 20f
            layoutParams = LinearLayout.LayoutParams(60, 60)
            background = createGradientDrawable("#FFFFFF", 30f)
            setTextColor(Color.parseColor("#2196F3"))
            setOnClickListener { onClick() }
        }
    }
    
    // ÂàõÂª∫Êìç‰ΩúÊåâÈíÆ
    private fun createActionButton(text: String, color: String, onClick: () -> Unit): Button {
        return Button(this).apply {
            this.text = text
            textSize = 16f
            typeface = Typeface.DEFAULT_BOLD
            setPadding(32, 16, 32, 16)
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.WRAP_CONTENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                setMargins(0, 0, 16, 0)
            }
            background = createGradientDrawable(color, 25f)
            setTextColor(Color.WHITE)
            elevation = 4f
            setOnClickListener { onClick() }
        }
    }
    
    // ÂàõÂª∫Á∫ßÂà´ÈÄâÊã©Âç°Áâá
    private fun createLevelSelectionCard(level: MatchingAlgorithm.MatchingLevel, currentLevelText: TextView): LinearLayout {
        val card = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                bottomMargin = 16
            }
            setPadding(20, 16, 20, 16)
            
            val isSelected = level == matchingAlgorithm.getCurrentLevel()
            background = if (isSelected) {
                createGradientDrawable("#E3F2FD", 16f).apply {
                    setStroke(3, Color.parseColor("#2196F3"))
                }
            } else {
                createGradientDrawable("#F8F9FA", 16f)
            }
            
            setOnClickListener {
                matchingAlgorithm.setMatchingLevel(level)
                currentLevelText.text = "ÂΩìÂâçÁ∫ßÂà´Ôºö${getLevelDisplayName(level)}"
                recreateAlgorithmPage()
            }
        }
        
        val titleText = TextView(this).apply {
            text = getLevelDisplayName(level)
            textSize = 18f
            typeface = Typeface.DEFAULT_BOLD
            setTextColor(Color.parseColor("#1A1A1A"))
        }
        card.addView(titleText)
        
        val descText = TextView(this).apply {
            text = matchingAlgorithm.getLevelDescription(level)
            textSize = 14f
            setTextColor(Color.parseColor("#666666"))
            setPadding(0, 8, 0, 4)
        }
        card.addView(descText)
        
        val exampleText = TextView(this).apply {
            text = matchingAlgorithm.getLevelExample(level)
            textSize = 13f
            setTextColor(Color.parseColor("#888888"))
            setPadding(0, 4, 0, 0)
        }
        card.addView(exampleText)
        
        return card
    }
    
    // ÈáçÊñ∞ÂàõÂª∫ÁÆóÊ≥ïÈ°µÈù¢
    private fun recreateAlgorithmPage() {
        createAlgorithmPageContent()
        if (currentTab == 2) {
            contentContainer.removeAllViews()
            contentContainer.addView(algorithmPageContent)
        }
    }
    
    // Ëé∑ÂèñÁ∫ßÂà´ÊòæÁ§∫ÂêçÁß∞
    private fun getLevelDisplayName(level: MatchingAlgorithm.MatchingLevel): String {
        return when (level) {
            MatchingAlgorithm.MatchingLevel.LOW -> "‰Ωé‰∏•Ê†ºÂ∫¶"
            MatchingAlgorithm.MatchingLevel.MEDIUM -> "‰∏≠Á≠â‰∏•Ê†ºÂ∫¶"
            MatchingAlgorithm.MatchingLevel.HIGH -> "È´ò‰∏•Ê†ºÂ∫¶"
        }
    }
    
    // Ëé∑ÂèñÁÆóÊ≥ïËØ¥Êòé
    private fun getAlgorithmExplanation(): String {
        return """
üí° ÁÆóÊ≥ïËØ¥Êòé

‚Ä¢ ‰Ωé‰∏•Ê†ºÂ∫¶ÔºöËæìÂÖ•2‰∏™Â≠óÁ¨¶ÂºÄÂßãÂåπÈÖçÔºåÂåÖÂê´ÊâÄÊúâÂ≠óÁ¨¶Âç≥ÂèØÔºåÈïøÂ∫¶Êó†ÈôêÂà∂
‚Ä¢ ‰∏≠Á≠â‰∏•Ê†ºÂ∫¶ÔºöËæìÂÖ•4‰∏™Â≠óÁ¨¶ÂºÄÂßãÂåπÈÖçÔºåË¶ÅÊ±ÇÂ≠óÁ¨¶Áõ∏ÈÇªÂá∫Áé∞ÔºåÈïøÂ∫¶Êó†ÈôêÂà∂  
‚Ä¢ È´ò‰∏•Ê†ºÂ∫¶ÔºöËæìÂÖ•6‰∏™Â≠óÁ¨¶ÂºÄÂßãÂåπÈÖçÔºå‰∏•Ê†ºÊåâÊãºÈü≥Èü≥ËäÇÂåπÈÖçÔºåÈïøÂ∫¶Êó†ÈôêÂà∂

‚ö†Ô∏è ‰øÆÊîπËÆæÁΩÆÂêéÁ´ãÂç≥ÁîüÊïàÔºåÂΩ±ÂìçÊêúÁ¥¢Ë°å‰∏∫
        """.trimIndent()
    }
    
    // Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆ
    private fun loadStats() {
        val repository = QuestionRepository(this)
        mainScope.launch {
            repository.loadQuestions()
            val stats = repository.getStats()
            val total = repository.getTotalCount()
            displayStats(total, stats)
        }
    }
    
    // ÊòæÁ§∫ÁªüËÆ°Êï∞ÊçÆ
    private fun displayStats(total: Int, stats: Map<String, Int>) {
        if (currentTab != 0) return
        
        val scrollView = homePageContent.getChildAt(0) as ScrollView
        val scrollContent = scrollView.getChildAt(0) as LinearLayout
        val welcomeCard = scrollContent.getChildAt(0) as LinearLayout
        val welcomeContent = welcomeCard.getChildAt(0) as LinearLayout
        
        // Ê∏ÖÈô§Âä†ËΩΩÊñáÊú¨
        if (welcomeContent.childCount > 1) {
            welcomeContent.removeViewAt(1)
        }
        
        // Ê∑ªÂä†ÁªüËÆ°Âç°Áâá
        val statsContainer = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
        }
        
        // ÊÄªÊï∞Âç°Áâá
        statsContainer.addView(createStatCard("È¢òÁõÆÊÄªÊï∞", total.toString(), "#4CAF50"))
        
        // ÂàÜÁ±ªÁªüËÆ°
        stats.forEach { (name, count) ->
            statsContainer.addView(createStatCard(name, count.toString(), "#2196F3"))
        }
        
        // Êï∞ÊçÆÊ∫êÊèêÁ§∫
        val sourceText = TextView(this).apply {
            text = if (fileManager.getParsedFiles().isNotEmpty()) "üìÅ ÂΩìÂâç‰ΩøÁî®ÔºöÁî®Êà∑‰∏ä‰º†È¢òÂ∫ì" else "üìö ÂΩìÂâç‰ΩøÁî®ÔºöÈªòËÆ§È¢òÂ∫ì"
            textSize = 14f
            setTextColor(Color.parseColor("#666666"))
            setPadding(0, 24, 0, 24)
            gravity = Gravity.CENTER
        }
        statsContainer.addView(sourceText)
        
        // ËæìÂÖ•Ê≥ïËÆæÁΩÆÊåâÈíÆÂÆπÂô®
        val buttonContainer = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            gravity = Gravity.CENTER
            setPadding(0, 16, 0, 0)
        }
        val settingsButton = createActionButton("‚öôÔ∏è ËæìÂÖ•Ê≥ïËÆæÁΩÆ", "#2196F3") {
            showInputMethodSettings()
        }
        buttonContainer.addView(settingsButton)
        statsContainer.addView(buttonContainer)
        
        welcomeContent.addView(statsContainer)
    }
    
    // ÂàõÂª∫ÁªüËÆ°Âç°Áâá
    private fun createStatCard(title: String, value: String, valueColor: String): LinearLayout {
        return LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            gravity = Gravity.CENTER_VERTICAL
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                bottomMargin = 16
            }
            setPadding(20, 16, 20, 16)
            background = createGradientDrawable("#F8F9FA", 12f)

            val titleView = TextView(this@MainActivity).apply {
                text = title
                textSize = 16f
                setTextColor(Color.parseColor("#666666"))
                layoutParams = LinearLayout.LayoutParams(
                    0,
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    1f
                )
            }
            addView(titleView)

            val valueView = TextView(this@MainActivity).apply {
                text = value
                textSize = 24f
                typeface = Typeface.DEFAULT_BOLD
                setTextColor(Color.parseColor(valueColor))
            }
            addView(valueView)
        }
    }
    
    // Êõ¥Êñ∞Êñá‰ª∂ÂàóË°®
    private fun updateFileList(container: LinearLayout) {
        container.removeAllViews()
        
        val files = fileManager.getAllFiles()
        if (files.isEmpty()) {
            val emptyText = TextView(this).apply {
                text = "üìÑ ÊöÇÊó†Êñá‰ª∂"
                textSize = 16f
                setTextColor(Color.parseColor("#999999"))
                setPadding(20, 20, 20, 20)
                gravity = Gravity.CENTER
                background = createGradientDrawable("#F8F9FA", 12f)
            }
            container.addView(emptyText)
        } else {
            files.forEach { fileInfo ->
                val fileItem = createFileItem(fileInfo) {
                    if (fileManager.deleteFile(fileInfo.name, fileInfo.type)) {
                        Toast.makeText(this, "Êñá‰ª∂Â∑≤Âà†Èô§", Toast.LENGTH_SHORT).show()
                        updateFileList(container)
                        if (currentTab == 0) loadStats()
                    } else {
                        Toast.makeText(this, "Âà†Èô§Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                    }
                }
                container.addView(fileItem)
            }
        }
    }
    
    // ÂàõÂª∫Êñá‰ª∂È°π
    private fun createFileItem(fileInfo: com.example.examkeyime.util.FileInfo, onDelete: () -> Unit): LinearLayout {
        return LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            gravity = Gravity.CENTER_VERTICAL
            setPadding(16, 16, 16, 16)
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                setMargins(0, 0, 0, 12)
            }
            background = createGradientDrawable("#FFFFFF", 12f)
            elevation = 2f
            
            val fileIcon = TextView(this@MainActivity).apply {
                text = if (fileInfo.type.name == "UPLOADED") "üìÑ" else "üìä"
                textSize = 20f
                setPadding(0, 0, 16, 0)
            }
            addView(fileIcon)
            
            val fileText = TextView(this@MainActivity).apply {
                text = "${fileInfo.name}\n${if (fileInfo.type.name == "UPLOADED") "ÂéüÂßãÊñá‰ª∂" else "Ëß£ÊûêÊñá‰ª∂"}"
                textSize = 14f
                setTextColor(Color.parseColor("#1A1A1A"))
                layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f)
            }
            addView(fileText)
            
            val deleteButton = Button(this@MainActivity).apply {
                text = "üóë"
                textSize = 16f
                layoutParams = LinearLayout.LayoutParams(50, 50)
                background = createGradientDrawable("#FF5252", 25f)
                setTextColor(Color.WHITE)
                setOnClickListener { onDelete() }
            }
            addView(deleteButton)
        }
    }

    // Â§ÑÁêÜÊñá‰ª∂‰∏ä‰º†
    private fun handleFileUpload(uri: Uri) {
        mainScope.launch {
            try {
                val fileName = getFileName(uri) ?: "unknown.md"
                if (!fileName.endsWith(".md", ignoreCase = true)) {
                    Toast.makeText(this@MainActivity, "ËØ∑ÈÄâÊã©MDÊ†ºÂºèÊñá‰ª∂", Toast.LENGTH_SHORT).show()
                    return@launch
                }
                
                val savedFileName = fileManager.saveUploadedFile(uri, fileName)
                if (savedFileName != null) {
                    Toast.makeText(this@MainActivity, "Êñá‰ª∂‰∏ä‰º†ÊàêÂäü", Toast.LENGTH_SHORT).show()
                    
                    val content = fileManager.readUploadedFile(savedFileName)
                    if (content != null) {
                        val questions = markdownParser.parseMarkdownToQuestions(content)
                        if (questions.isNotEmpty()) {
                            val jsonContent = Gson().toJson(questions)
                            val parsedFileName = fileManager.saveParsedQuestions(jsonContent, savedFileName)
                            if (parsedFileName != null) {
                                Toast.makeText(this@MainActivity, "È¢òÂ∫ìËß£ÊûêÂÆåÊàêÔºåÂÖ±${questions.size}ÈÅìÈ¢ò", Toast.LENGTH_LONG).show()
                                refreshPageContent()
                            }
                        } else {
                            showParseErrorDialog(fileName, "Êú™ËÉΩËß£ÊûêÂá∫ÊúâÊïàÈ¢òÁõÆÔºåËØ∑Ê£ÄÊü•Êñá‰ª∂Ê†ºÂºè")
                        }
                    }
                } else {
                    Toast.makeText(this@MainActivity, "Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                val fileName = getFileName(uri) ?: "unknown.md"
                showParseErrorDialog(fileName, "Ëß£ÊûêÂ§±Ë¥•Ôºö${e.message}")
            }
        }
    }
    
    private fun refreshPageContent() {
        when (currentTab) {
            0 -> loadStats()
            1 -> {
                val scrollView = uploadPageContent.getChildAt(0) as ScrollView
                val scrollContent = scrollView.getChildAt(0) as LinearLayout
                val uploadCard = scrollContent.getChildAt(0) as LinearLayout
                val uploadContent = uploadCard.getChildAt(0) as LinearLayout
                val fileListContainer = uploadContent.getChildAt(4) as LinearLayout
                updateFileList(fileListContainer)
            }
        }
    }
    
    private fun showParseErrorDialog(fileName: String, errorMessage: String) {
        val dialog = android.app.AlertDialog.Builder(this)
            .setTitle("Ëß£ÊûêÂ§±Ë¥•")
            .setMessage("Êñá‰ª∂ $fileName Ëß£ÊûêÂ§±Ë¥•\n\nÈîôËØØ‰ø°ÊÅØÔºö$errorMessage\n\nËØ∑Ê£ÄÊü•Êñá‰ª∂Ê†ºÂºèÊòØÂê¶Á¨¶ÂêàËßÑËåÉ„ÄÇ")
            .setPositiveButton("Êü•ÁúãÊ†ºÂºèËØ¥Êòé") { _, _ -> 
                showFormatReference()
            }
            .setNegativeButton("Á°ÆÂÆö", null)
            .create()
        dialog.show()
    }
    
    private fun showFormatReference() {
        val scrollView = ScrollView(this)
        val content = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(24, 24, 24, 24)
        }
        
        val title = TextView(this).apply {
            text = "üìã MDÊñá‰ª∂Ê†ºÂºèÂèÇËÄÉ"
            textSize = 20f
            typeface = Typeface.DEFAULT_BOLD
            setTextColor(Color.parseColor("#1A1A1A"))
            setPadding(0, 0, 0, 20)
        }
        content.addView(title)
        
        val formatGuide = TextView(this).apply {
            text = getFormatGuideText()
            textSize = 12f
            setTextColor(Color.parseColor("#333333"))
            typeface = Typeface.MONOSPACE
            background = createGradientDrawable("#F5F5F5", 8f)
            setPadding(16, 16, 16, 16)
        }
        content.addView(formatGuide)
        
        scrollView.addView(content)
        
        val dialog = android.app.AlertDialog.Builder(this)
            .setView(scrollView)
            .setPositiveButton("ÂÖ≥Èó≠", null)
            .create()
        dialog.show()
    }
    
    private fun getFormatGuideText(): String {
        return """
„ÄêÈáçË¶ÅËØ¥Êòé„Äë
ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãÊ†ºÂºèÂàõÂª∫MDÊñá‰ª∂ÔºåÂª∫ËÆÆÂàÜÂà´ÂàõÂª∫Ôºö
‚Ä¢ ÂçïÈÄâÈ¢ò.md
‚Ä¢ Â§öÈÄâÈ¢ò.md  
‚Ä¢ Âà§Êñ≠È¢ò.md

„ÄêÂçïÈÄâÈ¢òÊ†ºÂºè„Äë
1„ÄÅÈ©¨ÂÖãÊÄù‰∏ª‰πâÊòØ___________„ÄÇ
A„ÄÅÂÖ≥‰∫éÊó†‰∫ßÈò∂Á∫ßÂíå‰∫∫Á±ªËß£ÊîæÁöÑÁßëÂ≠¶ÁêÜËÆ∫
B„ÄÅ‰∫∫Ê∞ëÂ§ß‰ºóÊÄùÊÉ≥ÁöÑÁßëÂ≠¶‰ΩìÁ≥ª
C„ÄÅÈù©ÂëΩÈò∂Á∫ßÊÄùÊÉ≥ÁöÑÁßëÂ≠¶‰ΩìÁ≥ª
D„ÄÅÈù©ÂëΩÊîøÂÖöÊÄùÊÉ≥ÁöÑÁßëÂ≠¶‰ΩìÁ≥ª
Á≠îÊ°àÔºöA

„ÄêÂ§öÈÄâÈ¢òÊ†ºÂºè„Äë
1„ÄÅÈ©¨ÂÖãÊÄù‰∏ª‰πâÁöÑÁªÑÊàêÈÉ®ÂàÜÂåÖÊã¨Ôºà    Ôºâ„ÄÇ
A„ÄÅÈ©¨ÂÖãÊÄù‰∏ª‰πâÂì≤Â≠¶
B„ÄÅÈ©¨ÂÖãÊÄù‰∏ª‰πâÊîøÊ≤ªÁªèÊµéÂ≠¶
C„ÄÅÁßëÂ≠¶Á§æ‰ºö‰∏ª‰πâ
D„ÄÅÈ©¨ÂÖãÊÄù‰∏ª‰πâÊñáËâ∫ÁêÜËÆ∫
Á≠îÊ°àÔºöABC

„ÄêÂà§Êñ≠È¢òÊ†ºÂºè„Äë
1„ÄÅÊó∂Èó¥ÂíåÁ©∫Èó¥ÊòØËøêÂä®ÁùÄÁöÑÁâ©Ë¥®ÁöÑÂü∫Êú¨Â≠òÂú®ÂΩ¢Âºè„ÄÇ
Á≠îÊ°àÔºöÊ≠£Á°Æ

„ÄêÊ†ºÂºèË¶ÅÊ±Ç„Äë
1. È¢òÁõÆÁºñÂè∑ÔºöÊîØÊåÅ 1„ÄÅ1. 1) (1) Á¨¨1È¢ò Á≠âÊ†ºÂºè
2. ÈÄâÈ°πÔºöÂøÖÈ°ªÁî® A„ÄÅB„ÄÅC„ÄÅD ÂºÄÂ§¥
3. Á≠îÊ°àË°åÔºöÂøÖÈ°ª‰ª•"Á≠îÊ°àÔºö"ÂºÄÂ§¥
4. Âà§Êñ≠È¢òÁ≠îÊ°àÔºöÁî®"Ê≠£Á°Æ"„ÄÅ"ÈîôËØØ"„ÄÅ"ÂØπ"„ÄÅ"Èîô"„ÄÅ"T"„ÄÅ"F"Á≠â
5. Â§öÈÄâÈ¢òÁ≠îÊ°àÔºöÁõ¥Êé•ÂÜôÂ≠óÊØçÁªÑÂêàÔºåÂ¶Ç"ABC"
6. ÊØèÈ¢ò‰πãÈó¥Áî®Á©∫Ë°åÂàÜÈöî
7. Êñá‰ª∂ÁºñÁ†ÅÂøÖÈ°ªÊòØUTF-8
        """.trimIndent()
    }
    
    private fun showInputMethodSettings() {
        val intent = Intent(Settings.ACTION_INPUT_METHOD_SETTINGS)
        startActivity(intent)
    }
    
    private fun getFileName(uri: Uri): String? {
        return try {
            contentResolver.query(uri, null, null, null, null)?.use { cursor ->
                val nameIndex = cursor.getColumnIndex(android.provider.OpenableColumns.DISPLAY_NAME)
                cursor.moveToFirst()
                cursor.getString(nameIndex)
            }
        } catch (e: Exception) {
            null
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        mainScope.cancel()
    }
}